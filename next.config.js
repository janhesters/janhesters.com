const withMDX = require('@next/mdx')({
  extension: /\.mdx?$/,
});

module.exports = withMDX({
  pageExtensions: ['js', 'mdx'],
});

// <script src="https://cdnjs.cloudflare.com/ajax/libs/postscribe/2.0.8/postscribe.min.js"></script>
// <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/components/prism-core.min.js" integrity="sha512-xR+IAyN+t9EBIOOJw5m83FTVMDsPd63IhJ3ElP4gmfUFnQlX9+eWGLp3P4t3gIjpo2Z1JzqtW/5cjgn+oru3yQ==" crossorigin="anonymous"></script>
// <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/autoloader/prism-autoloader.min.js" integrity="sha512-zc7WDnCM3aom2EziyDIRAtQg1mVXLdILE09Bo+aE1xk0AM2c2cVLfSW9NrxE5tKTX44WBY0Z2HClZ05ur9vB6A==" crossorigin="anonymous"></script>
// <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/unescaped-markup/prism-unescaped-markup.min.js" integrity="sha512-HLGEkAJpy4x6+5YvKMTlo7Xyz2MgA/+4nJEsIOaM9b+LjLDvpsay+0EpUmSNVeopbCaT5Fptwhbc0y+pUFBPqg==" crossorigin="anonymous"></script>
// <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js" integrity="sha512-L03kznCrNOfVxOUovR6ESfCz9Gfny7gihUX/huVbQB9zjODtYpxaVtIaAkpetoiyV2eqWbvxMH9fiSv5enX7bw==" crossorigin="anonymous"></script>

// <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism-okaidia.min.css" integrity="sha512-mIs9kKbaw6JZFfSuo+MovjU+Ntggfoj8RwAmJbVXQ5mkAX5LlgETQEweFPI18humSPHymTb5iikEOKWF7I8ncQ==" crossorigin="anonymous" />
// <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/plugins/unescaped-markup/prism-unescaped-markup.min.css" integrity="sha512-g33HCZ23fueSK96JEeoy9DelAlu7Ry5mtxqLk+zlEiPj7NIpFI6T9mybOvQxjBN50FALFDCviMXiLqWJcFwzaA==" crossorigin="anonymous" />

// <script>
//   function formatCode(el) {
//     // in "basic html" environments, (for example, testing
//     // in a repl) we should use the innerHTML function
//     // to get at the raw text we want to modify and highlight.
//     // but in webflow, the rtf field inserts <br> tags
//     // and escapes entities, and showdown escapes html entities,
//     // so in those cases the easiest way to get "clean"
//     // text is the innerText function.
//     let showdownMode = (el.tagName === 'CODE'),
//         accessor = 'innerHTML';
//     if (!showdownMode ||
//         el.innerText.split('\n').length > 1) {
//       accessor = 'innerText';
//     }
//     // find our magic declaration string. if we don't find it,
//     // do nothing
//     let match = el[accessor].match(/--\s*CODE\s+(.*)\s?--/),
//         classNames, codeEl;
//     if (match && match[1]) {
//       classNames = match[1];
//     } else {
//       return;
//     }
//     // strip off the magic string, everything preceding it, and
//     // all leading and trailing whitespace
//     let txt = el[accessor].substring(match.index+match[0].length).trim();
//     el.innerHTML = '';
//     if (classNames.match(/language-markup/)) {
//       codeEl = document.createElement('script');
//       codeEl.type = 'text/plain';
//     } else {
//       codeEl = document.createElement('pre').
//                         appendChild(document.createElement('code'));
//     }
//     codeEl.className = classNames.trim();
//     if (showdownMode) {
//       // go up two levels to replace the <pre><code> generated by showdown
//       el.parentElement.parentElement.
//                        replaceChild(codeEl.parentElement || codeEl,
//                                     el.parentElement);
//     } else {
//       // go up one level to replace the <p> generated by webflow
//       el.parentElement.replaceChild(codeEl,el);
//     }
//     codeEl.innerHTML = txt;
//   }

//   function rtfToMarkdown(el) {
//     let txt = el.innerHTML;
//     txt = txt.replace(/<p>/g, '');
//     txt = txt.replace(/<\/p>/g, '\n\n');
//     txt = txt.replace(/<br>/g, '\n');
//     txt = txt.replace(/&nbsp;/g, ' ');
//     txt = txt.replace(/&lt;/g, '<');
//     txt = txt.replace(/&gt;/g, '>');
//     txt = txt.replace(/&amp;lt;/g, '&lt;');
//     // console.log(txt);
//     return txt;
//   }

//   function markdownToHtml(txt) {
//     let converter = new showdown.Converter({
//       noHeaderId: true,
//       headerLevelStart: 2,
//       literalMidWordUnderscores: true
//     });
//     let html = converter.makeHtml(txt);
//     // console.log(html);
//     return html;
//   }

//   // if there are elements with a class named 'markdown'
//   // attached, first convert their content to html
//   let markdowns = $('.markdown');
//   markdowns.toArray().forEach((el) => {
//     let txt = rtfToMarkdown(el),
//         html = markdownToHtml(txt);
//     el.innerHTML = html;
//   });

//   // syntax-highlight elements that contain a string like
//   //   -- CODE language-foo optional additional classes --
//   // if we're working with a raw webflow rtf field, we want
//   // to grab matching <p> elements. if we're working with
//   // html that we've run through showdown, we want to grab
//   // matching <code> elements
//   let snips = $('p:contains("CODE"),code:contains("CODE")');
//   snips.toArray().forEach(formatCode);
//   Prism.highlightAll();
// </script>
